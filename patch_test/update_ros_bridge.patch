diff --git a/Dockerfile b/Dockerfile
index c7a6800..8de9534 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,34 +1,27 @@
-# Argument to enable or disable CUDA support, can be set during build with --build-arg
-ARG CUDA_ENABLED=false
-
-# Set the base Autoware version, using a conditional statement to switch to CUDA version if enabled
 ARG AUTOWARE_VERSION=latest-melodic
-ARG AUTOWARE_VERSION_CUDA=latest-melodic-cuda
 
-# Use the appropriate base image based on CUDA_ENABLED flag
-FROM autoware/autoware:${CUDA_ENABLED:+$AUTOWARE_VERSION_CUDA:-$AUTOWARE_VERSION}
+FROM autoware/autoware:$AUTOWARE_VERSION
 
 USER autoware
-ENV USERNAME autoware
+ENV USERNAME=autoware
 
 WORKDIR /home/autoware
 
-# Copy and apply patch to update simulation package version to the latest
+# Update autoware/simulation package version to latest.
 COPY --chown=autoware update_sim_version.patch /home/$USERNAME/Autoware
 RUN patch ./Autoware/autoware.ai.repos /home/$USERNAME/Autoware/update_sim_version.patch
 
-# Copy and apply code patch to modify autoware/simulation package as needed
+# Change code in autoware/simulation package.
 COPY --chown=autoware update_sim_code.patch /home/$USERNAME/Autoware/src/autoware/simulation
 RUN cd /home/$USERNAME/Autoware \
     && vcs import src < autoware.ai.repos \
     && cd /home/$USERNAME/Autoware/src/autoware/simulation \
     && git apply update_sim_code.patch
 
-# Conditional compilation based on CUDA_ENABLED
-# If CUDA_ENABLED is set to true, AUTOWARE_COMPILE_WITH_CUDA=1 is used, otherwise 0
+# Compile with colcon build.
 RUN cd ./Autoware \
     && source /opt/ros/melodic/setup.bash \
-    && AUTOWARE_COMPILE_WITH_CUDA=${CUDA_ENABLED} colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
+    && AUTOWARE_COMPILE_WITH_CUDA=0 colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
 
 USER root
 # Fix GPG error by updating ROS repository key
@@ -57,24 +50,24 @@ RUN pip install transforms3d simple-pid pygame networkx==2.2
 
 USER autoware
 
-# RUN git clone -b 'master' --recurse-submodules https://github.com/carla-simulator/ros-bridge.git
-RUN git clone -b 'master' --recurse-submodules https://github.com/MalteMatthey/ros-bridge-param-mod.git
+RUN git clone -b 'master' --recurse-submodules https://github.com/carla-simulator/ros-bridge.git
+# RUN git clone -b 'master' --recurse-submodules https://github.com/MalteMatthey/ros-bridge-param-mod.git
 
 # Update code in carla-ros-bridge package and fix the tf tree issue.
 # The fix has been introduced in latest version (since 0.9.12):
 # https://github.com/carla-simulator/ros-bridge/pull/570/commits/9f903cf43c4ef3dd0b909721e044c62a8796f841
-#COPY --chown=autoware update_ros_bridge.patch /home/$USERNAME/ros-bridge
-#RUN cd /home/$USERNAME/ros-bridge \
-#    && git apply update_ros_bridge.patch
+COPY --chown=autoware update_ros_bridge.patch /home/$USERNAME/ros-bridge
+RUN cd /home/$USERNAME/ros-bridge \
+    && git apply update_ros_bridge.patch
 
 # CARLA Autoware agent
-COPY --chown=autoware . ./carla-autoware
+COPY --chown=autoware . ./carla-autoware-version-mod
 
 RUN mkdir -p carla_ws/src
 RUN cd carla_ws/src \
-    # && ln -s ../../ros-bridge \
-    && ln -s ../../ros-bridge-param-mod \
-    && ln -s ../../carla-autoware/carla-autoware-agent \
+    && ln -s ../../ros-bridge \
+    #&& ln -s ../../ros-bridge-param-mod \
+    && ln -s ../../carla-autoware-version-mod/carla-autoware-agent \
     && cd .. \
     && source /opt/ros/melodic/setup.bash \
     && catkin_make
@@ -92,4 +85,4 @@ USER root
 #RUN add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
 #RUN apt-get -y install code
 
-CMD ["/bin/bash"]
+CMD ["/bin/bash"]
\ No newline at end of file
diff --git a/build.sh b/build.sh
index bfd3161..1c0f952 100755
--- a/build.sh
+++ b/build.sh
@@ -1,7 +1,2 @@
 #!/bin/sh
-
-# Default to true if CUDA_ENABLED is not set (to disable CUDA call the script with parameter 'CUDA_ENABLED=false ./build.sh')
-CUDA_ENABLED=${CUDA_ENABLED:-true}
-
-# Run the docker build command with the CUDA_ENABLED build argument
-docker build -t carla-autoware -f Dockerfile . --build-arg CUDA_ENABLED=$CUDA_ENABLED "$@"
+docker build -t carla-autoware -f Dockerfile . "$@"
diff --git a/run.sh b/run.sh
index 1d0df1a..fcb8958 100755
--- a/run.sh
+++ b/run.sh
@@ -4,23 +4,17 @@
 USER_ID="$(id -u)"
 XAUTH=$HOME/.Xauthority
 
-# Check CUDA_ENABLED and set RUNTIME accordingly (to disable CUDA call the script with parameter 'CUDA_ENABLED=false ./run.sh')
-CUDA_ENABLED=${CUDA_ENABLED:-true}
-if [[ "$CUDA_ENABLED" == "true" ]]; then
-    DOCKER_VERSION=$(docker version --format '{{.Client.Version}}' | cut --delimiter=. --fields=1,2)
-    if [[ $DOCKER_VERSION < "19.03" ]]; then
-        if command -v nvidia-docker &> /dev/null; then
-            RUNTIME="--runtime=nvidia"
-        else
-            echo "Warning: nvidia-docker is not installed. Running without GPU support."
-            RUNTIME=""
-        fi
-    else
-        RUNTIME="--gpus all"
-    fi
-else
-    RUNTIME=""  # No GPU support if CUDA_ENABLED is false
-fi
+#DOCKER_VERSION=$(docker version --format '{{.Client.Version}}' | cut --delimiter=. --fields=1,2)
+#    if [[ $DOCKER_VERSION < "19.03" ]]; then
+#        if command -v nvidia-docker &> /dev/null; then
+#            RUNTIME="--runtime=nvidia"
+#        else
+#            echo "Warning: nvidia-docker is not installed. Running without GPU support."
+#            RUNTIME=""
+#        fi
+#    else
+#        RUNTIME="--gpus all"
+#    fi
 
 docker run \
     -it --rm \
diff --git a/update_ros_bridge.patch b/update_ros_bridge.patch
index 43ff4e6..214d9d3 100644
--- a/update_ros_bridge.patch
+++ b/update_ros_bridge.patch
@@ -1,63 +1,78 @@
-diff --git a/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py b/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
-index e3b0667..91bd78b 100755
---- a/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
-+++ b/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
-@@ -112,7 +112,7 @@ class ActorFactory(object):
-         for actor_id in new_actors:
-             carla_actor = self.world.get_actor(actor_id)
-             if self.node.parameters["register_all_sensors"] or not isinstance(carla_actor, carla.Sensor):
--                self._create_object_from_actor(carla_actor)
-+                self._create_object_from_actor(carla_actor, None)
+# diff --git a/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py b/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
+# index e3b0667..91bd78b 100755
+# --- a/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
+# +++ b/carla_ros_bridge/src/carla_ros_bridge/actor_factory.py
+# @@ -112,7 +112,7 @@ class ActorFactory(object):
+#          for actor_id in new_actors:
+#              carla_actor = self.world.get_actor(actor_id)
+#              if self.node.parameters["register_all_sensors"] or not isinstance(carla_actor, carla.Sensor):
+# -                self._create_object_from_actor(carla_actor)
+# +                self._create_object_from_actor(carla_actor, None)
  
-         for actor_id in deleted_actors:
-             self._destroy_object(actor_id, delete_actor=False)
-@@ -123,7 +123,8 @@ class ActorFactory(object):
-                 task = self._task_queue.get()
-                 if task[0] == ActorFactory.TaskType.SPAWN_ACTOR and not self.node.shutdown.is_set():
-                     carla_actor = self.world.get_actor(task[1][0])
--                    self._create_object_from_actor(carla_actor)
-+                    relative_transform = task[1][1].transform
-+                    self._create_object_from_actor(carla_actor, relative_transform)
-                 elif task[0] == ActorFactory.TaskType.SPAWN_PSEUDO_ACTOR and not self.node.shutdown.is_set():
-                     pseudo_object = task[1]
-                     self._create_object(pseudo_object[0], pseudo_object[1].type, pseudo_object[1].id,
-@@ -169,7 +170,7 @@ class ActorFactory(object):
-                 self._task_queue.put((ActorFactory.TaskType.SPAWN_PSEUDO_ACTOR, (id_, req)))
-             else:
-                 id_ = self._spawn_carla_actor(req)
--                self._task_queue.put((ActorFactory.TaskType.SPAWN_ACTOR, (id_, None)))
-+                self._task_queue.put((ActorFactory.TaskType.SPAWN_ACTOR, (id_, req)))
-             self._known_actor_ids.append(id_)
-         return id_
+#          for actor_id in deleted_actors:
+#              self._destroy_object(actor_id, delete_actor=False)
+# @@ -123,7 +123,8 @@ class ActorFactory(object):
+#                  task = self._task_queue.get()
+#                  if task[0] == ActorFactory.TaskType.SPAWN_ACTOR and not self.node.shutdown.is_set():
+#                      carla_actor = self.world.get_actor(task[1][0])
+# -                    self._create_object_from_actor(carla_actor)
+# +                    relative_transform = task[1][1].transform
+# +                    self._create_object_from_actor(carla_actor, relative_transform)
+#                  elif task[0] == ActorFactory.TaskType.SPAWN_PSEUDO_ACTOR and not self.node.shutdown.is_set():
+#                      pseudo_object = task[1]
+#                      self._create_object(pseudo_object[0], pseudo_object[1].type, pseudo_object[1].id,
+# @@ -169,7 +170,7 @@ class ActorFactory(object):
+#                  self._task_queue.put((ActorFactory.TaskType.SPAWN_PSEUDO_ACTOR, (id_, req)))
+#              else:
+#                  id_ = self._spawn_carla_actor(req)
+# -                self._task_queue.put((ActorFactory.TaskType.SPAWN_ACTOR, (id_, None)))
+# +                self._task_queue.put((ActorFactory.TaskType.SPAWN_ACTOR, (id_, req)))
+#              self._known_actor_ids.append(id_)
+#          return id_
  
-@@ -222,26 +223,20 @@ class ActorFactory(object):
-         carla_actor = self.world.spawn_actor(blueprint, transform, attach_to)
-         return carla_actor.id
+# @@ -222,26 +223,20 @@ class ActorFactory(object):
+#          carla_actor = self.world.spawn_actor(blueprint, transform, attach_to)
+#          return carla_actor.id
  
--    def _create_object_from_actor(self, carla_actor):
-+    def _create_object_from_actor(self, carla_actor, relative_transform):
-         """
-         create a object for a given carla actor
-         Creates also the object for its parent, if not yet existing
-         """
-         parent = None
-         # the transform relative to the map
--        relative_transform = trans.carla_transform_to_ros_pose(carla_actor.get_transform())
-+        if relative_transform == None:
-+            relative_transform = trans.carla_transform_to_ros_pose(carla_actor.get_transform())
-         if carla_actor.parent:
-             if carla_actor.parent.id in self.actors:
-                 parent = self.actors[carla_actor.parent.id]
-             else:
--                parent = self._create_object_from_actor(carla_actor.parent)
--            # calculate relative transform to the parent
--            actor_transform_matrix = trans.ros_pose_to_transform_matrix(relative_transform)
--            parent_transform_matrix = trans.ros_pose_to_transform_matrix(
--                trans.carla_transform_to_ros_pose(carla_actor.parent.get_transform()))
--            relative_transform_matrix = np.matrix(
--                parent_transform_matrix).getI() * np.matrix(actor_transform_matrix)
--            relative_transform = trans.transform_matrix_to_ros_pose(relative_transform_matrix)
-+                parent = self._create_object_from_actor(carla_actor.parent, None)
+# -    def _create_object_from_actor(self, carla_actor):
+# +    def _create_object_from_actor(self, carla_actor, relative_transform):
+#          """
+#          create a object for a given carla actor
+#          Creates also the object for its parent, if not yet existing
+#          """
+#          parent = None
+#          # the transform relative to the map
+# -        relative_transform = trans.carla_transform_to_ros_pose(carla_actor.get_transform())
+# +        if relative_transform == None:
+# +            relative_transform = trans.carla_transform_to_ros_pose(carla_actor.get_transform())
+#          if carla_actor.parent:
+#              if carla_actor.parent.id in self.actors:
+#                  parent = self.actors[carla_actor.parent.id]
+#              else:
+# -                parent = self._create_object_from_actor(carla_actor.parent)
+# -            # calculate relative transform to the parent
+# -            actor_transform_matrix = trans.ros_pose_to_transform_matrix(relative_transform)
+# -            parent_transform_matrix = trans.ros_pose_to_transform_matrix(
+# -                trans.carla_transform_to_ros_pose(carla_actor.parent.get_transform()))
+# -            relative_transform_matrix = np.matrix(
+# -                parent_transform_matrix).getI() * np.matrix(actor_transform_matrix)
+# -            relative_transform = trans.transform_matrix_to_ros_pose(relative_transform_matrix)
+# +                parent = self._create_object_from_actor(carla_actor.parent, None)
  
-         parent_id = 0
-         if parent is not None:
+#          parent_id = 0
+#          if parent is not None:
+diff --git a/carla_ros_bridge/launch/carla_ros_bridge.launch b/carla_ros_bridge/launch/carla_ros_bridge.launch
+index abcdef1..2345678 100644
+--- a/carla_ros_bridge/launch/carla_ros_bridge.launch
++++ b/carla_ros_bridge/launch/carla_ros_bridge.launch
+@@ -11,7 +11,7 @@
+   <arg name='port' default='2000'/>
+-  <arg name='timeout' default='2'/>
++  <arg name='timeout' default='10'/>
+   <!-- 
+     enable/disable synchronous mode. If enabled ros-bridge waits until
+     expected data is received for all sensors
+   -->
+-</launch>
+\ No newline at end of file
++</launch>
